server:
  port: ${PORT:${SERVER_PORT:0}}
eureka:
  client:
    fetch-registry: 'true'
    register-with-eureka: 'true'
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    service-url:
      defaultZone: http://localhost:8761/eureka
spring:
  data:
    mongodb:
   #  uri: mongodb+srv://joffre:joffre@bootcamp-microservicios.c9yhl.mongodb.net/chatgpt-nttdata-hackahton?retryWrites=true&w=majority
      uri: mongodb+srv://chatgpt:chatgpt@cluster1.km8zme5.mongodb.net/chatgpt-nttdata-hackahton?retryWrites=true&w=majorit
 
      
       
  redis:
        url: redis://localhost:6379


        

resilience4j.circuitbreaker:
    instances:
        backendA:
            registerHealthIndicator: true
            slidingWindowSize: 10
            permittedNumberOfCallsInHalfOpenState: 3
            slidingWindowType: TIME_BASED
            minimumNumberOfCalls: 20
            waitDurationInOpenState: 2s
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
        backendB:
            registerHealthIndicator: true
            slidingWindowSize: 10
            permittedNumberOfCallsInHalfOpenState: 3
            slidingWindowType: TIME_BASED
            minimumNumberOfCalls: 20
            waitDurationInOpenState: 2s
            failureRateThreshold: 50
            eventConsumerBufferSize: 10

resilience4j.timelimiter:
    instances:
        backendA:
            timeoutDuration: 2s
            cancelRunningFuture: true
        backendB:
            timeoutDuration: 1s
            cancelRunningFuture: false
            
            
            
config:
 balanceador:
  test: pruebas de balanceo de carga desde el config server EUREKA y Spring Cloud Gate            